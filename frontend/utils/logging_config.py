"""
Configuration du logging pour le frontend Streamlit
"""

import logging
import logging.handlers
import json
import os
from datetime import datetime
from typing import Optional, Dict, Any
import streamlit as st


class StreamlitLogger:
    """Logger sp√©cialis√© pour Streamlit avec tra√ßabilit√© compl√®te"""
    
    def __init__(self, name: str = "ecommerce_frontend"):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.DEBUG)
        
        # Initialiser l'attribut _api_calls_logger
        self._api_calls_logger = None
        
        # √âviter la duplication des handlers
        if not self.logger.handlers:
            self._setup_handlers()
    
    def _setup_handlers(self):
        """Configure les handlers de logging"""
        try:
            # 1. Handler console
            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging.INFO)
            console_formatter = logging.Formatter(
                '%(asctime)s | %(levelname)-8s | %(name)-20s | %(funcName)-15s:%(lineno)-4d | %(message)s',
                datefmt='%H:%M:%S'
            )
            console_handler.setFormatter(console_formatter)
            self.logger.addHandler(console_handler)
            
            # 2. Handler fichier pour tous les logs
            if not os.path.exists('logs'):
                os.makedirs('logs')
            
            file_handler = logging.handlers.RotatingFileHandler(
                'logs/frontend.log',
                maxBytes=10*1024*1024,  # 10MB
                backupCount=5,
                encoding='utf-8'
            )
            file_handler.setLevel(logging.DEBUG)
            file_formatter = logging.Formatter(
                '%(asctime)s | %(levelname)-8s | %(name)-20s | %(funcName)-15s:%(lineno)-4d | %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )
            file_handler.setFormatter(file_formatter)
            self.logger.addHandler(file_handler)
            
            # 3. Handler fichier pour les erreurs uniquement
            error_handler = logging.handlers.RotatingFileHandler(
                'logs/frontend_errors.log',
                maxBytes=5*1024*1024,  # 5MB
                backupCount=3,
                encoding='utf-8'
            )
            error_handler.setLevel(logging.ERROR)
            error_handler.setFormatter(file_formatter)
            self.logger.addHandler(error_handler)
            
            # 4. Handler fichier pour les appels API
            api_handler = logging.handlers.RotatingFileHandler(
                'logs/frontend_api_calls.log',
                maxBytes=20*1024*1024,  # 20MB
                backupCount=10,
                encoding='utf-8'
            )
            api_handler.setLevel(logging.INFO)
            api_formatter = logging.Formatter(
                '%(asctime)s | %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )
            api_handler.setFormatter(api_formatter)
            
            # Logger sp√©cialis√© pour les appels API
            self._api_calls_logger = logging.getLogger(f"{self.logger.name}.api_calls")
            self._api_calls_logger.setLevel(logging.INFO)
            self._api_calls_logger.addHandler(api_handler)
            self._api_calls_logger.propagate = False  # √âviter la duplication
            
        except Exception as e:
            # En cas d'erreur, cr√©er un logger de fallback
            print(f"‚ö†Ô∏è Erreur lors de la configuration du logging: {e}")
            self._api_calls_logger = logging.getLogger(f"{self.logger.name}.api_calls")
            self._api_calls_logger.setLevel(logging.INFO)
    
    def get_logger(self) -> logging.Logger:
        """Retourne le logger principal"""
        return self.logger
    
    def get_api_calls_logger(self) -> logging.Logger:
        """Retourne le logger sp√©cialis√© pour les appels API"""
        if self._api_calls_logger is None:
            # Cr√©er un logger de fallback si l'initialisation a √©chou√©
            self._api_calls_logger = logging.getLogger(f"{self.logger.name}.api_calls")
            self._api_calls_logger.setLevel(logging.INFO)
        return self._api_calls_logger


# Instance globale du logger
frontend_logger = StreamlitLogger()
logger = frontend_logger.get_logger()
api_calls_logger = frontend_logger.get_api_calls_logger()


def log_api_call(method: str, url: str, status_code: int, 
                response_time: float, request_data: Optional[dict] = None, 
                response_data: Optional[dict] = None, error: Optional[str] = None):
    """
    Log un appel API c√¥t√© frontend
    
    Args:
        method: M√©thode HTTP (GET, POST, etc.)
        url: URL de l'API
        status_code: Code de statut HTTP
        response_time: Temps de r√©ponse en secondes
        request_data: Donn√©es de la requ√™te (optionnel)
        response_data: Donn√©es de la r√©ponse (optionnel)
        error: Message d'erreur (optionnel)
    """
    
    # Informations de base
    log_data = {
        'timestamp': datetime.now().isoformat(),
        'method': method,
        'url': url,
        'status_code': status_code,
        'response_time_ms': round(response_time * 1000, 2),
        'session_id': st.session_state.get('session_id', 'No-Session'),
        'user_authenticated': st.session_state.get('authenticated', False),
        'user_id': st.session_state.get('user_id', None)
    }
    
    # Ajouter les donn√©es de requ√™te si pr√©sentes
    if request_data:
        log_data['request_data'] = request_data
    
    # Ajouter les donn√©es de r√©ponse si pr√©sentes
    if response_data:
        log_data['response_data'] = response_data
    
    # Ajouter l'erreur si pr√©sente
    if error:
        log_data['error'] = error
    
    # Log format√©
    api_calls_logger.info(json.dumps(log_data, ensure_ascii=False, indent=None))


def log_user_action(action: str, **kwargs):
    """
    Log une action utilisateur dans l'IHM
    
    Args:
        action: Action effectu√©e
        **kwargs: Informations suppl√©mentaires
    """
    
    action_data = {
        'action': action,
        'timestamp': datetime.now().isoformat(),
        'session_id': st.session_state.get('session_id', 'No-Session'),
        'user_authenticated': st.session_state.get('authenticated', False),
        'user_id': st.session_state.get('user_id', None),
        'page': st.session_state.get('selected_page', 'Unknown'),
        'details': kwargs
    }
    
    logger.info(f"üë§ USER_ACTION | {json.dumps(action_data, ensure_ascii=False)}")


def log_navigation(from_page: str, to_page: str, **kwargs):
    """
    Log une navigation entre pages
    
    Args:
        from_page: Page de d√©part
        to_page: Page d'arriv√©e
        **kwargs: Informations suppl√©mentaires
    """
    
    nav_data = {
        'navigation': f"{from_page} -> {to_page}",
        'timestamp': datetime.now().isoformat(),
        'session_id': st.session_state.get('session_id', 'No-Session'),
        'user_authenticated': st.session_state.get('authenticated', False),
        'user_id': st.session_state.get('user_id', None),
        'details': kwargs
    }
    
    logger.info(f"üß≠ NAVIGATION | {json.dumps(nav_data, ensure_ascii=False)}")


def log_error(error: Exception, context: str = "", **kwargs):
    """
    Log une erreur avec contexte
    
    Args:
        error: Exception lev√©e
        context: Contexte de l'erreur
        **kwargs: Informations suppl√©mentaires
    """
    
    error_data = {
        'error_type': type(error).__name__,
        'error_message': str(error),
        'context': context,
        'timestamp': datetime.now().isoformat(),
        'session_id': st.session_state.get('session_id', 'No-Session'),
        'user_authenticated': st.session_state.get('authenticated', False),
        'user_id': st.session_state.get('user_id', None),
        'page': st.session_state.get('selected_page', 'Unknown'),
        'details': kwargs
    }
    
    logger.error(f"‚ùå ERROR | {json.dumps(error_data, ensure_ascii=False)}")


def log_performance(operation: str, duration: float, **kwargs):
    """
    Log des m√©triques de performance
    
    Args:
        operation: Nom de l'op√©ration
        duration: Dur√©e en secondes
        **kwargs: M√©triques suppl√©mentaires
    """
    
    metrics = {
        'operation': operation,
        'duration_ms': round(duration * 1000, 2),
        'timestamp': datetime.now().isoformat(),
        'session_id': st.session_state.get('session_id', 'No-Session'),
        'details': kwargs
    }
    
    logger.info(f"üìä PERFORMANCE | {json.dumps(metrics, ensure_ascii=False)}")


def log_authentication_event(event_type: str, **kwargs):
    """
    Log un √©v√©nement d'authentification
    
    Args:
        event_type: Type d'√©v√©nement (login, logout, token_refresh, etc.)
        **kwargs: Informations suppl√©mentaires
    """
    
    auth_data = {
        'event_type': event_type,
        'timestamp': datetime.now().isoformat(),
        'session_id': st.session_state.get('session_id', 'No-Session'),
        'details': kwargs
    }
    
    logger.info(f"üîê AUTH | {json.dumps(auth_data, ensure_ascii=False)}")


# Fonction utilitaire pour cr√©er des loggers sp√©cialis√©s
def get_logger(name: str) -> logging.Logger:
    """
    Cr√©e un logger sp√©cialis√© pour un module
    
    Args:
        name: Nom du logger (g√©n√©ralement __name__)
    
    Returns:
        Logger configur√©
    """
    return logging.getLogger(f"ecommerce_frontend.{name}")


# Configuration des loggers externes
def configure_external_loggers():
    """Configure les loggers des biblioth√®ques externes"""
    
    # R√©duire le niveau de logging des biblioth√®ques externes
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('streamlit').setLevel(logging.WARNING)


# Initialisation
configure_external_loggers()

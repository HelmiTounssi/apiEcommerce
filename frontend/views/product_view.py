"""
Vue pour la gestion des produits
"""

import streamlit as st
from ..services.api_client import get_api_client
from ..services import ProductService
from ..services.auth_service import get_auth_service
from ..presenters import ProductPresenter


def show_products():
    """Affiche la page de gestion des produits"""
    
    # V√©rifier l'authentification et le r√¥le
    auth_service = get_auth_service()
    is_authenticated = auth_service.is_authenticated()
    is_admin = auth_service.is_admin() if is_authenticated else False
    
    # Header style Back Market adapt√© selon le r√¥le
    if is_admin:
        title = "üì¶ Gestion des Produits"
        subtitle = "Administration - Catalogue et inventaire"
    elif is_authenticated:
        title = "üì¶ Catalogue Produits"
        subtitle = "D√©couvrez notre s√©lection de produits"
    else:
        title = "üì¶ Catalogue Produits"
        subtitle = "D√©couvrez notre s√©lection de produits"
    
    st.markdown(f"""
    <div style="background: linear-gradient(135deg, #00d4aa 0%, #00b894 100%); padding: 2rem; border-radius: 12px; margin-bottom: 2rem; text-align: center;">
        <h1 style="color: white; font-size: 2.2rem; margin: 0; font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; font-weight: 600;">{title}</h1>
        <p style="color: white; font-size: 1rem; margin: 0; opacity: 0.9; font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;">{subtitle}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialiser les services
    api_client = get_api_client()
    product_service = ProductService(api_client)
    product_presenter = ProductPresenter(product_service)
    
    # Menu des actions adapt√© selon le r√¥le
    st.markdown('<h2 class="section-title">üéØ Actions</h2>', unsafe_allow_html=True)
    
    if is_admin:
        # Options pour les administrateurs
        action_options = [
            "üìã Liste des produits",
            "‚ûï Cr√©er un produit", 
            "‚úèÔ∏è Modifier un produit",
            "üóëÔ∏è Supprimer un produit",
            "üì¶ Gestion des stocks",
            "üîç Rechercher un produit",
            "üìä Statistiques"
        ]
    else:
        # Options pour les visiteurs et clients
        action_options = [
            "üìã Parcourir le catalogue",
            "üîç Rechercher un produit",
            "üìä Statistiques du catalogue"
        ]
    
    action = st.selectbox(
        "Choisir une action",
        action_options,
        key="product_action",
        label_visibility="collapsed"
    )
    
    # Routage des actions selon le r√¥le
    if action == "üìã Liste des produits" or action == "üìã Parcourir le catalogue":
        show_product_catalog(product_presenter, is_admin)
    
    elif action == "‚ûï Cr√©er un produit":
        if is_admin:
            product_presenter.show_create_form()
        else:
            st.error("üîí Cette fonctionnalit√© est r√©serv√©e aux administrateurs.")
    
    elif action == "‚úèÔ∏è Modifier un produit":
        if is_admin:
            show_product_edit_form(product_presenter)
        else:
            st.error("üîí Cette fonctionnalit√© est r√©serv√©e aux administrateurs.")
    
    elif action == "üóëÔ∏è Supprimer un produit":
        if is_admin:
            show_product_delete_form(product_presenter)
        else:
            st.error("üîí Cette fonctionnalit√© est r√©serv√©e aux administrateurs.")
    
    elif action == "üì¶ Gestion des stocks":
        if is_admin:
            show_stock_management(product_presenter)
        else:
            st.error("üîí Cette fonctionnalit√© est r√©serv√©e aux administrateurs.")
    
    elif action == "üîç Rechercher un produit":
        show_product_search(product_presenter)
    
    elif action == "üìä Statistiques" or action == "üìä Statistiques du catalogue":
        show_product_analytics(product_presenter)
    
    # Gestion des actions contextuelles
    handle_product_actions(product_presenter)
    
    # Gestion de l'affichage des d√©tails de produit
    handle_product_detail_display(product_presenter)
    
    # Debug: afficher l'√©tat de l'authentification
    if is_admin:
        show_auth_debug_info()


def show_product_catalog(product_presenter: ProductPresenter, is_admin: bool):
    """Affiche le catalogue des produits avec interface adapt√©e selon le r√¥le"""
    
    if is_admin:
        st.subheader("üìã Liste des Produits - Administration")
        product_presenter.show_list()
    else:
        st.subheader("üìã Catalogue des Produits")
        show_catalog_grid(product_presenter)


def show_catalog_grid(product_presenter: ProductPresenter):
    """Affiche le catalogue sous forme de grille pour les visiteurs/clients"""
    
    # Charger tous les produits
    products = product_presenter.service.get_all()
    
    if not products:
        st.info("‚ÑπÔ∏è Aucun produit disponible dans le catalogue")
        return
    
    # Filtres pour le catalogue
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Filtre par cat√©gorie
        categories = ["Toutes"] + list(set(p.categorie for p in products))
        selected_category = st.selectbox("Filtrer par cat√©gorie", categories)
    
    with col2:
        # Filtre par disponibilit√©
        availability = st.selectbox("Disponibilit√©", ["Tous", "En stock", "Rupture de stock"])
    
    with col3:
        # Tri
        sort_option = st.selectbox("Trier par", ["Nom", "Prix croissant", "Prix d√©croissant", "Stock"])
    
    # Appliquer les filtres
    filtered_products = products
    
    if selected_category != "Toutes":
        filtered_products = [p for p in filtered_products if p.categorie == selected_category]
    
    if availability == "En stock":
        filtered_products = [p for p in filtered_products if p.quantite_stock > 0]
    elif availability == "Rupture de stock":
        filtered_products = [p for p in filtered_products if p.quantite_stock == 0]
    
    # Appliquer le tri
    if sort_option == "Nom":
        filtered_products.sort(key=lambda x: x.nom)
    elif sort_option == "Prix croissant":
        filtered_products.sort(key=lambda x: x.prix)
    elif sort_option == "Prix d√©croissant":
        filtered_products.sort(key=lambda x: x.prix, reverse=True)
    elif sort_option == "Stock":
        filtered_products.sort(key=lambda x: x.quantite_stock, reverse=True)
    
    st.write(f"**{len(filtered_products)} produit(s) trouv√©(s)**")
    
    # Affichage en grille
    cols_per_row = 3
    for i in range(0, len(filtered_products), cols_per_row):
        cols = st.columns(cols_per_row)
        
        for j, col in enumerate(cols):
            if i + j < len(filtered_products):
                product = filtered_products[i + j]
                
                with col:
                    # Carte produit
                    st.markdown(f"""
                    <div style="
                        border: 1px solid #e0e0e0;
                        border-radius: 12px;
                        padding: 1rem;
                        margin-bottom: 1rem;
                        background: white;
                        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                        transition: transform 0.2s;
                    ">
                        <h4 style="margin: 0 0 0.5rem 0; color: #333;">{product.nom}</h4>
                        <p style="margin: 0 0 0.5rem 0; color: #666; font-size: 0.9rem;">{product.categorie}</p>
                        <p style="margin: 0 0 0.5rem 0; color: #00d4aa; font-weight: bold; font-size: 1.2rem;">{product.prix:.2f} ‚Ç¨</p>
                        <p style="margin: 0; color: {'#28a745' if product.quantite_stock > 0 else '#dc3545'}; font-size: 0.9rem;">
                            {'‚úÖ En stock' if product.quantite_stock > 0 else '‚ùå Rupture'}
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Bouton pour voir les d√©tails
                    if st.button(f"Voir d√©tails", key=f"view_product_{product.id}"):
                        st.session_state[f"show_product_detail_{product.id}"] = True
                        st.rerun()


def show_product_edit_form(product_presenter: ProductPresenter):
    """Affiche le formulaire de modification de produit pour les admins"""
    st.subheader("‚úèÔ∏è Modifier un Produit")
    
    # S√©lection du produit √† modifier
    products = product_presenter.service.get_all()
    
    if not products:
        st.info("Aucun produit √† modifier")
        return
    
    product_options = {f"{p.nom} (ID: {p.id})": p.id for p in products}
    selected_product_name = st.selectbox("S√©lectionner le produit √† modifier", list(product_options.keys()))
    
    if selected_product_name:
        product_id = product_options[selected_product_name]
        
        if st.button("Modifier ce produit"):
            st.session_state[f"edit_product_{product_id}"] = True
            st.rerun()


def show_product_delete_form(product_presenter: ProductPresenter):
    """Affiche le formulaire de suppression de produit pour les admins"""
    st.subheader("üóëÔ∏è Supprimer un Produit")
    
    # S√©lection du produit √† supprimer
    products = product_presenter.service.get_all()
    
    if not products:
        st.info("Aucun produit √† supprimer")
        return
    
    product_options = {f"{p.nom} (ID: {p.id})": p.id for p in products}
    selected_product_name = st.selectbox("S√©lectionner le produit √† supprimer", list(product_options.keys()))
    
    if selected_product_name:
        product_id = product_options[selected_product_name]
        
        # Afficher les d√©tails du produit avant suppression
        product = next((p for p in products if p.id == product_id), None)
        if product:
            st.warning("‚ö†Ô∏è **Produit s√©lectionn√© pour suppression :**")
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**Nom :** {product.nom}")
                st.write(f"**Cat√©gorie :** {product.categorie}")
                st.write(f"**Prix :** {product.prix:.2f} ‚Ç¨")
            
            with col2:
                st.write(f"**Stock :** {product.quantite_stock}")
                st.write(f"**Description :** {product.description[:100]}...")
            
            # Confirmation de suppression
            if st.button("üóëÔ∏è Confirmer la suppression", type="primary"):
                if product_presenter.service.delete(product_id):
                    st.success("‚úÖ Produit supprim√© avec succ√®s")
                    st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la suppression")


def show_stock_management(product_presenter: ProductPresenter):
    """Affiche la gestion des stocks pour les admins"""
    st.subheader("üì¶ Gestion des Stocks")
    
    # Charger tous les produits
    products = product_presenter.service.get_all()
    
    if not products:
        st.info("Aucun produit √† g√©rer")
        return
    
    # Filtres pour la gestion des stocks
    col1, col2 = st.columns(2)
    
    with col1:
        stock_filter = st.selectbox("Filtrer par √©tat du stock", 
                                  ["Tous", "En stock", "Stock faible (‚â§5)", "Rupture de stock"])
    
    with col2:
        category_filter = st.selectbox("Filtrer par cat√©gorie", 
                                     ["Toutes"] + list(set(p.categorie for p in products)))
    
    # Appliquer les filtres
    filtered_products = products
    
    if stock_filter == "En stock":
        filtered_products = [p for p in filtered_products if p.quantite_stock > 5]
    elif stock_filter == "Stock faible (‚â§5)":
        filtered_products = [p for p in filtered_products if 0 < p.quantite_stock <= 5]
    elif stock_filter == "Rupture de stock":
        filtered_products = [p for p in filtered_products if p.quantite_stock == 0]
    
    if category_filter != "Toutes":
        filtered_products = [p for p in filtered_products if p.categorie == category_filter]
    
    st.write(f"**{len(filtered_products)} produit(s) trouv√©(s)**")
    
    # Affichage des produits avec gestion de stock
    for product in filtered_products:
        with st.expander(f"{product.nom} - Stock: {product.quantite_stock}"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write(f"**Cat√©gorie :** {product.categorie}")
                st.write(f"**Prix :** {product.prix:.2f} ‚Ç¨")
            
            with col2:
                st.write(f"**Stock actuel :** {product.quantite_stock}")
                
                # Indicateur de stock
                if product.quantite_stock == 0:
                    st.error("‚ùå Rupture de stock")
                elif product.quantite_stock <= 5:
                    st.warning("‚ö†Ô∏è Stock faible")
                else:
                    st.success("‚úÖ Stock suffisant")
            
            with col3:
                # Modification du stock
                new_stock = st.number_input(
                    "Nouveau stock",
                    min_value=0,
                    value=product.quantite_stock,
                    key=f"stock_{product.id}"
                )
                
                if st.button("Mettre √† jour", key=f"update_stock_{product.id}"):
                    # Mettre √† jour le stock
                    updated_product = product
                    updated_product.quantite_stock = new_stock
                    
                    if product_presenter.service.update(product.id, updated_product):
                        st.success("‚úÖ Stock mis √† jour")
                        st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la mise √† jour")


def show_product_search(product_presenter: ProductPresenter):
    """Affiche la recherche de produit"""
    st.subheader("üîç Rechercher un Produit")
    
    search_type = st.radio(
        "Type de recherche",
        ["Par ID", "Par nom", "Par cat√©gorie"],
        key="product_search_type"
    )
    
    if search_type == "Par ID":
        product_id = st.number_input("ID du produit", min_value=1, key="product_id_search")
        if st.button("Rechercher", key="search_by_id"):
            if product_id:
                product_presenter.show_detail(product_id)
            else:
                st.error("Veuillez entrer un ID valide")
    
    elif search_type == "Par nom":
        product_name = st.text_input("Nom du produit", key="product_name_search")
        if st.button("Rechercher", key="search_by_name"):
            if product_name:
                products = product_presenter.service.get_all()
                matching_products = [
                    p for p in products 
                    if product_name.lower() in p.nom.lower()
                ]
                
                if matching_products:
                    st.write(f"**{len(matching_products)} produit(s) trouv√©(s):**")
                    for product in matching_products:
                        if st.button(f"{product.nom} (ID: {product.id})", key=f"select_product_{product.id}"):
                            product_presenter.show_detail(product.id)
                else:
                    st.error("Aucun produit trouv√©")
            else:
                st.error("Veuillez entrer un nom valide")
    
    else:  # Par cat√©gorie
        products = product_presenter.service.get_all()
        categories = list(set(p.categorie for p in products))
        
        if categories:
            selected_category = st.selectbox("Cat√©gorie", categories, key="product_category_search")
            if st.button("Rechercher", key="search_by_category"):
                category_products = product_presenter.service.get_by_category(selected_category)
                
                if category_products:
                    st.write(f"**{len(category_products)} produit(s) dans la cat√©gorie '{selected_category}':**")
                    for product in category_products:
                        if st.button(f"{product.nom} (ID: {product.id})", key=f"select_category_product_{product.id}"):
                            product_presenter.show_detail(product.id)
                else:
                    st.error("Aucun produit trouv√© dans cette cat√©gorie")
        else:
            st.info("Aucune cat√©gorie disponible")


def show_product_analytics(product_presenter: ProductPresenter):
    """Affiche les analyses des produits"""
    st.subheader("üìä Analyses des Produits")
    
    # Statistiques g√©n√©rales
    stats = product_presenter.service.get_statistics()
    
    if stats["total"] > 0:
        # M√©triques principales
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Total Produits", stats["total"])
        with col2:
            st.metric("En Stock", stats["in_stock"])
        with col3:
            st.metric("Rupture", stats["out_of_stock"])
        with col4:
            st.metric("Valeur Stock", f"{stats['total_value']:.2f}‚Ç¨")
        
        # Analyses d√©taill√©es
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà R√©partition par Cat√©gorie")
            if stats["categories"]:
                import plotly.express as px
                fig = px.pie(
                    values=list(stats["categories"].values()),
                    names=list(stats["categories"].keys()),
                    title="Produits par cat√©gorie"
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("üìä √âtat du Stock")
            import plotly.express as px
            stock_data = {
                "√âtat": ["En stock", "Rupture"],
                "Nombre": [stats["in_stock"], stats["out_of_stock"]]
            }
            fig = px.bar(
                x=stock_data["√âtat"],
                y=stock_data["Nombre"],
                title="R√©partition du stock"
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # Top produits par valeur
        st.subheader("üí∞ Top Produits par Valeur")
        products = stats["products"]
        if products:
            product_values = [
                {
                    "Produit": p.nom,
                    "Prix": p.prix,
                    "Stock": p.quantite_stock,
                    "Valeur": p.prix * p.quantite_stock
                }
                for p in products
            ]
            
            # Trier par valeur
            product_values.sort(key=lambda x: x["Valeur"], reverse=True)
            
            import pandas as pd
            df = pd.DataFrame(product_values[:10])  # Top 10
            st.dataframe(df, use_container_width=True)
    
    else:
        st.info("Aucune donn√©e disponible pour les analyses")


def handle_product_actions(product_presenter: ProductPresenter):
    """G√®re les actions contextuelles sur les produits"""
    
    # V√©rifier les actions d'√©dition
    for key, value in st.session_state.items():
        if key.startswith("edit_product_") and value:
            product_id = int(key.split("_")[2])
            product_presenter.show_update_form(product_id)
            break
    
    # V√©rifier les actions de gestion du stock
    for key, value in st.session_state.items():
        if key.startswith("manage_stock_") and value:
            product_id = int(key.split("_")[2])
            product_presenter.show_stock_management(product_id)
            break


def handle_product_detail_display(product_presenter: ProductPresenter):
    """G√®re l'affichage des d√©tails de produit"""
    
    # V√©rifier les demandes d'affichage de d√©tails
    for key, value in st.session_state.items():
        if key.startswith("show_product_detail_") and value:
            product_id = int(key.split("_")[3])
            show_product_detail(product_presenter, product_id)
            break


def show_product_detail(product_presenter: ProductPresenter, product_id: int):
    """Affiche les d√©tails d'un produit avec une interface moderne"""
    
    # R√©cup√©rer le produit
    product = product_presenter.service.get_by_id(product_id)
    
    if not product:
        st.error("‚ùå Produit non trouv√©")
        return
    
    # Header avec bouton de retour
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê Retour", key="back_to_catalog"):
            # Nettoyer l'√©tat de session
            for key in list(st.session_state.keys()):
                if key.startswith("show_product_detail_"):
                    del st.session_state[key]
            st.rerun()
    
    with col2:
        st.markdown(f"### {product.nom}")
    
    # Affichage des d√©tails en deux colonnes
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Informations principales
        st.markdown("""
        <div style="
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        ">
        """, unsafe_allow_html=True)
        
        st.markdown(f"**üì¶ Cat√©gorie :** {product.categorie}")
        st.markdown(f"**üí∞ Prix :** {product.prix:.2f} ‚Ç¨")
        
        # Indicateur de disponibilit√©
        if product.quantite_stock > 0:
            st.markdown(f"**‚úÖ Disponibilit√© :** En stock ({product.quantite_stock} unit√©s)")
        else:
            st.markdown("**‚ùå Disponibilit√© :** Rupture de stock")
        
        st.markdown("---")
        
        # Description
        st.markdown("**üìù Description :**")
        st.write(product.description)
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        # Actions et informations compl√©mentaires
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 1.5rem;
            border-radius: 12px;
            border-left: 4px solid #00d4aa;
        ">
        """, unsafe_allow_html=True)
        
        # Informations techniques
        st.markdown("**‚ÑπÔ∏è Informations :**")
        st.write(f"**ID :** {product.id}")
        st.write(f"**Date d'ajout :** {product.date_creation}")
        
        # Actions selon le r√¥le
        auth_service = get_auth_service()
        is_admin = auth_service.is_authenticated() and auth_service.is_admin()
        
        if is_admin:
            st.markdown("**‚öôÔ∏è Actions Admin :**")
            
            col_btn1, col_btn2 = st.columns(2)
            
            with col_btn1:
                if st.button("‚úèÔ∏è Modifier", key=f"edit_detail_{product.id}"):
                    st.session_state[f"edit_product_{product.id}"] = True
                    st.rerun()
            
            with col_btn2:
                if st.button("üóëÔ∏è Supprimer", key=f"delete_detail_{product.id}"):
                    st.session_state[f"delete_product_{product.id}"] = True
                    st.rerun()
            
            # Gestion rapide du stock
            st.markdown("**üì¶ Gestion du stock :**")
            new_stock = st.number_input(
                "Stock",
                min_value=0,
                value=product.quantite_stock,
                key=f"quick_stock_{product.id}"
            )
            
            if st.button("Mettre √† jour", key=f"quick_update_{product.id}"):
                updated_product = product
                updated_product.quantite_stock = new_stock
                
                if product_presenter.service.update(product.id, updated_product):
                    st.success("‚úÖ Stock mis √† jour")
                    st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la mise √† jour")
        
        else:
            # Actions pour les clients/visiteurs
            if auth_service.is_authenticated():
                st.markdown("**üõí Actions :**")
                
                if product.quantite_stock > 0:
                    if st.button("üõí Ajouter au panier", key=f"add_to_cart_{product.id}"):
                        st.info("üöß Fonctionnalit√© de panier en cours de d√©veloppement")
                else:
                    st.info("‚ùå Produit indisponible")
            else:
                st.info("üîí Connectez-vous pour ajouter au panier")
        
        st.markdown("</div>", unsafe_allow_html=True)


def show_auth_debug_info():
    """Affiche les informations de debug pour l'authentification (Admin uniquement)"""
    
    with st.expander("üîß Debug - √âtat de l'authentification", expanded=False):
        api_client = get_api_client()
        auth_info = api_client.get_auth_info()
        
        st.write("**√âtat de l'authentification :**")
        st.write(f"- Authentifi√© : {auth_info['is_authenticated']}")
        st.write(f"- Token pr√©sent : {auth_info['has_token']}")
        st.write(f"- Token (preview) : {auth_info['token_preview']}")
        
        if auth_info['user']:
            st.write(f"- Utilisateur : {auth_info['user'].get('nom', 'N/A')}")
            st.write(f"- Email : {auth_info['user'].get('email', 'N/A')}")
            st.write(f"- R√¥le : {auth_info['user'].get('role', 'N/A')}")
        
        # Bouton pour tester une requ√™te API
        if st.button("üß™ Tester une requ√™te API authentifi√©e"):
            try:
                # Tester une requ√™te simple
                response = api_client._make_request("GET", "/api/produits/")
                if response is not None:
                    st.success("‚úÖ Requ√™te API r√©ussie")
                else:
                    st.error("‚ùå Requ√™te API √©chou√©e")
            except Exception as e:
                st.error(f"‚ùå Erreur lors du test : {str(e)}")
        
        # Bouton pour rafra√Æchir l'√©tat
        if st.button("üîÑ Rafra√Æchir l'√©tat"):
            st.rerun()
